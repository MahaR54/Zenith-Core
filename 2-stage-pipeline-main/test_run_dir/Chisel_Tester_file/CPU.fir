;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit CPU : 
  module Fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip enb : UInt<1>, flip in : UInt<32>, out : UInt<32>}
    
    reg PCs : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Fetch.scala 11:20]
    node _pc_buffer_T = add(PCs, io.in) @[Fetch.scala 12:41]
    node _pc_buffer_T_1 = tail(_pc_buffer_T, 1) @[Fetch.scala 12:41]
    node pc_buffer = mux(io.enb, io.in, _pc_buffer_T_1) @[Fetch.scala 12:24]
    PCs <= pc_buffer @[Fetch.scala 13:8]
    io.out <= PCs @[Fetch.scala 14:11]
    
  module Regfile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip data : SInt<32>, flip wenb : UInt<1>, d1 : SInt<32>, d2 : SInt<32>}
    
    wire _Regfile_WIRE : SInt<32>[32] @[RegFile.scala 17:32]
    _Regfile_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    reg Regfile : SInt<32>[32], clock with : (reset => (reset, _Regfile_WIRE)) @[RegFile.scala 17:24]
    node _T = orr(io.rs1) @[RegFile.scala 18:15]
    when _T : @[RegFile.scala 18:20]
      io.d1 <= Regfile[io.rs1] @[RegFile.scala 19:11]
      skip @[RegFile.scala 18:20]
    else : @[RegFile.scala 21:13]
      io.d1 <= asSInt(UInt<1>("h00")) @[RegFile.scala 22:11]
      skip @[RegFile.scala 21:13]
    node _T_1 = orr(io.rs2) @[RegFile.scala 24:15]
    when _T_1 : @[RegFile.scala 24:20]
      io.d2 <= Regfile[io.rs2] @[RegFile.scala 25:11]
      skip @[RegFile.scala 24:20]
    else : @[RegFile.scala 27:13]
      io.d2 <= asSInt(UInt<1>("h00")) @[RegFile.scala 28:11]
      skip @[RegFile.scala 27:13]
    node _T_2 = orr(io.rd) @[RegFile.scala 30:14]
    node _T_3 = eq(io.wenb, UInt<1>("h01")) @[RegFile.scala 30:28]
    node _T_4 = and(_T_2, _T_3) @[RegFile.scala 30:18]
    when _T_4 : @[RegFile.scala 30:36]
      Regfile[io.rd] <= io.data @[RegFile.scala 31:20]
      skip @[RegFile.scala 30:36]
    
  module imm : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, flip pc_out : UInt<32>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[imm.scala 11:10]
    node _T = bits(io.ins, 6, 0) @[imm.scala 12:16]
    node _T_1 = eq(UInt<5>("h013"), _T) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      node _io_out_T = bits(io.ins, 31, 20) @[imm.scala 14:25]
      node _io_out_T_1 = asSInt(_io_out_T) @[imm.scala 14:35]
      io.out <= _io_out_T_1 @[imm.scala 14:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<7>("h067"), _T) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _io_out_T_2 = bits(io.ins, 31, 31) @[imm.scala 17:36]
        node _io_out_T_3 = bits(_io_out_T_2, 0, 0) @[Bitwise.scala 72:15]
        node _io_out_T_4 = mux(_io_out_T_3, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node _io_out_T_5 = bits(io.ins, 31, 20) @[imm.scala 17:48]
        node _io_out_T_6 = dshr(_io_out_T_4, _io_out_T_5) @[imm.scala 17:41]
        node _io_out_T_7 = bits(_io_out_T_6, 0, 0) @[imm.scala 17:41]
        node _io_out_T_8 = asSInt(_io_out_T_7) @[imm.scala 17:59]
        io.out <= _io_out_T_8 @[imm.scala 17:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<6>("h023"), _T) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          node io_out_hi = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node io_out_hi_1 = bits(io.ins, 31, 24) @[imm.scala 20:47]
          node io_out_lo = bits(io.ins, 12, 7) @[imm.scala 20:63]
          node io_out_lo_1 = cat(io_out_hi_1, io_out_lo) @[Cat.scala 30:58]
          node _io_out_T_9 = cat(io_out_hi, io_out_lo_1) @[Cat.scala 30:58]
          node _io_out_T_10 = asSInt(_io_out_T_9) @[imm.scala 20:74]
          io.out <= _io_out_T_10 @[imm.scala 20:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<7>("h063"), _T) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node io_out_hi_2 = bits(io.ins, 31, 31) @[imm.scala 23:32]
            node io_out_lo_2 = bits(io.ins, 7, 7) @[imm.scala 23:44]
            node io_out_hi_3 = cat(io_out_hi_2, io_out_lo_2) @[Cat.scala 30:58]
            node io_out_hi_4 = bits(io.ins, 30, 25) @[imm.scala 23:60]
            node io_out_lo_3 = bits(io.ins, 11, 8) @[imm.scala 23:76]
            node io_out_lo_4 = cat(io_out_hi_4, io_out_lo_3) @[Cat.scala 30:58]
            node _io_out_T_11 = cat(io_out_hi_3, io_out_lo_4) @[Cat.scala 30:58]
            node _io_out_T_12 = asSInt(_io_out_T_11) @[imm.scala 23:87]
            io.out <= _io_out_T_12 @[imm.scala 23:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_5 = eq(UInt<6>("h037"), _T) @[Conditional.scala 37:30]
            when _T_5 : @[Conditional.scala 39:67]
              node _io_out_T_13 = bits(io.ins, 31, 12) @[imm.scala 27:24]
              node _io_out_T_14 = asSInt(_io_out_T_13) @[imm.scala 27:34]
              io.out <= _io_out_T_14 @[imm.scala 27:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_6 = eq(UInt<2>("h03"), _T) @[Conditional.scala 37:30]
              when _T_6 : @[Conditional.scala 39:67]
                node io_out_hi_5 = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                node io_out_lo_5 = bits(io.ins, 31, 20) @[imm.scala 31:43]
                node _io_out_T_15 = cat(io_out_hi_5, io_out_lo_5) @[Cat.scala 30:58]
                node _io_out_T_16 = asSInt(_io_out_T_15) @[imm.scala 31:54]
                io.out <= _io_out_T_16 @[imm.scala 31:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_7 = eq(UInt<7>("h06f"), _T) @[Conditional.scala 37:30]
                when _T_7 : @[Conditional.scala 39:67]
                  node _io_out_T_17 = bits(io.ins, 31, 31) @[imm.scala 34:36]
                  node _io_out_T_18 = bits(_io_out_T_17, 0, 0) @[Bitwise.scala 72:15]
                  node io_out_hi_hi_hi = mux(_io_out_T_18, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                  node io_out_hi_hi_lo = bits(io.ins, 31, 31) @[imm.scala 34:49]
                  node io_out_hi_lo = bits(io.ins, 19, 12) @[imm.scala 34:61]
                  node io_out_lo_hi_hi = bits(io.ins, 20, 20) @[imm.scala 34:76]
                  node io_out_lo_hi_lo = bits(io.ins, 30, 21) @[imm.scala 34:87]
                  node io_out_lo_hi = cat(io_out_lo_hi_hi, io_out_lo_hi_lo) @[Cat.scala 30:58]
                  node io_out_lo_6 = cat(io_out_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
                  node io_out_hi_hi = cat(io_out_hi_hi_hi, io_out_hi_hi_lo) @[Cat.scala 30:58]
                  node io_out_hi_6 = cat(io_out_hi_hi, io_out_hi_lo) @[Cat.scala 30:58]
                  node _io_out_T_19 = cat(io_out_hi_6, io_out_lo_6) @[Cat.scala 30:58]
                  node _io_out_T_20 = asSInt(_io_out_T_19) @[imm.scala 34:101]
                  io.out <= _io_out_T_20 @[imm.scala 34:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_8 = eq(UInt<5>("h017"), _T) @[Conditional.scala 37:30]
                  when _T_8 : @[Conditional.scala 39:67]
                    node io_out_hi_7 = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node io_out_lo_7 = bits(io.ins, 31, 12) @[imm.scala 37:42]
                    node _io_out_T_21 = cat(io_out_hi_7, io_out_lo_7) @[Cat.scala 30:58]
                    node _io_out_T_22 = add(_io_out_T_21, io.pc_out) @[imm.scala 37:51]
                    node _io_out_T_23 = tail(_io_out_T_22, 1) @[imm.scala 37:51]
                    node _io_out_T_24 = asSInt(_io_out_T_23) @[imm.scala 37:63]
                    io.out <= _io_out_T_24 @[imm.scala 37:14]
                    skip @[Conditional.scala 39:67]
    
  module controlunit : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, op : UInt<4>, writereg : UInt<1>, load : UInt<1>, store : UInt<1>, auipc : UInt<32>, reg_pc_enb : UInt<1>}
    
    node _io_rd_T = bits(io.ins, 11, 7) @[Controlunit.scala 19:18]
    io.rd <= _io_rd_T @[Controlunit.scala 19:10]
    node _io_rs1_T = bits(io.ins, 19, 15) @[Controlunit.scala 20:19]
    io.rs1 <= _io_rs1_T @[Controlunit.scala 20:11]
    node _io_rs2_T = bits(io.ins, 24, 20) @[Controlunit.scala 21:19]
    io.rs2 <= _io_rs2_T @[Controlunit.scala 21:11]
    node _io_op_T = bits(io.ins, 6, 0) @[Controlunit.scala 22:22]
    node _io_op_T_1 = eq(_io_op_T, UInt<6>("h033")) @[Controlunit.scala 22:27]
    node io_op_hi = bits(io.ins, 30, 30) @[Controlunit.scala 22:53]
    node io_op_lo = bits(io.ins, 14, 12) @[Controlunit.scala 22:64]
    node _io_op_T_2 = cat(io_op_hi, io_op_lo) @[Cat.scala 30:58]
    node _io_op_T_3 = bits(io.ins, 14, 12) @[Controlunit.scala 22:79]
    node _io_op_T_4 = mux(_io_op_T_1, _io_op_T_2, _io_op_T_3) @[Controlunit.scala 22:15]
    io.op <= _io_op_T_4 @[Controlunit.scala 22:10]
    node _io_writereg_T = bits(io.ins, 6, 0) @[Controlunit.scala 23:29]
    node _io_writereg_T_1 = eq(_io_writereg_T, UInt<6>("h033")) @[Controlunit.scala 23:34]
    node _io_writereg_T_2 = bits(io.ins, 6, 0) @[Controlunit.scala 24:14]
    node _io_writereg_T_3 = eq(_io_writereg_T_2, UInt<5>("h013")) @[Controlunit.scala 24:19]
    node _io_writereg_T_4 = or(_io_writereg_T_1, _io_writereg_T_3) @[Controlunit.scala 23:50]
    node _io_writereg_T_5 = bits(io.ins, 6, 0) @[Controlunit.scala 25:13]
    node _io_writereg_T_6 = eq(_io_writereg_T_5, UInt<2>("h03")) @[Controlunit.scala 25:18]
    node _io_writereg_T_7 = or(_io_writereg_T_4, _io_writereg_T_6) @[Controlunit.scala 24:35]
    node _io_writereg_T_8 = bits(io.ins, 6, 0) @[Controlunit.scala 26:13]
    node _io_writereg_T_9 = eq(_io_writereg_T_8, UInt<6>("h037")) @[Controlunit.scala 26:18]
    node _io_writereg_T_10 = or(_io_writereg_T_7, _io_writereg_T_9) @[Controlunit.scala 25:35]
    node _io_writereg_T_11 = bits(io.ins, 6, 0) @[Controlunit.scala 27:13]
    node _io_writereg_T_12 = eq(_io_writereg_T_11, UInt<7>("h06f")) @[Controlunit.scala 27:18]
    node _io_writereg_T_13 = or(_io_writereg_T_10, _io_writereg_T_12) @[Controlunit.scala 26:35]
    node _io_writereg_T_14 = bits(io.ins, 6, 0) @[Controlunit.scala 28:13]
    node _io_writereg_T_15 = eq(_io_writereg_T_14, UInt<5>("h017")) @[Controlunit.scala 28:18]
    node _io_writereg_T_16 = or(_io_writereg_T_13, _io_writereg_T_15) @[Controlunit.scala 27:34]
    node _io_writereg_T_17 = mux(_io_writereg_T_16, UInt<1>("h01"), UInt<1>("h00")) @[Controlunit.scala 23:21]
    io.writereg <= _io_writereg_T_17 @[Controlunit.scala 23:16]
    node _io_load_T = bits(io.ins, 6, 0) @[Controlunit.scala 29:24]
    node _io_load_T_1 = eq(_io_load_T, UInt<2>("h03")) @[Controlunit.scala 29:29]
    node _io_load_T_2 = mux(_io_load_T_1, UInt<1>("h01"), UInt<1>("h00")) @[Controlunit.scala 29:17]
    io.load <= _io_load_T_2 @[Controlunit.scala 29:12]
    node _io_store_T = bits(io.ins, 6, 0) @[Controlunit.scala 30:25]
    node _io_store_T_1 = eq(_io_store_T, UInt<6>("h023")) @[Controlunit.scala 30:30]
    node _io_store_T_2 = mux(_io_store_T_1, UInt<1>("h01"), UInt<1>("h00")) @[Controlunit.scala 30:18]
    io.store <= _io_store_T_2 @[Controlunit.scala 30:13]
    node io_auipc_hi = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_auipc_lo = bits(io.ins, 31, 12) @[Controlunit.scala 31:40]
    node _io_auipc_T = cat(io_auipc_hi, io_auipc_lo) @[Cat.scala 30:58]
    io.auipc <= _io_auipc_T @[Controlunit.scala 31:14]
    node _io_reg_pc_enb_T = bits(io.ins, 6, 0) @[Controlunit.scala 32:30]
    node _io_reg_pc_enb_T_1 = eq(_io_reg_pc_enb_T, UInt<7>("h067")) @[Controlunit.scala 32:35]
    node _io_reg_pc_enb_T_2 = mux(_io_reg_pc_enb_T_1, UInt<1>("h01"), UInt<1>("h00")) @[Controlunit.scala 32:23]
    io.reg_pc_enb <= _io_reg_pc_enb_T_2 @[Controlunit.scala 32:18]
    
  module Decode : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, flip pcout : UInt<32>, flip regdata : SInt<32>, reg_enb : UInt<1>, instout : UInt<32>, immout : SInt<32>, read1 : SInt<32>, read2 : SInt<32>, op : UInt<4>, opcode : UInt<7>, load : UInt<1>, writereg : UInt<1>, store : UInt<1>}
    
    inst Reg of Regfile @[Decode.scala 27:20]
    Reg.clock <= clock
    Reg.reset <= reset
    inst Imme of imm @[Decode.scala 29:21]
    Imme.clock <= clock
    Imme.reset <= reset
    inst CU of controlunit @[Decode.scala 31:19]
    CU.clock <= clock
    CU.reset <= reset
    CU.io.ins <= io.instruction @[Decode.scala 35:14]
    Imme.io.ins <= io.instruction @[Decode.scala 38:16]
    Imme.io.pc_out <= io.pcout @[Decode.scala 39:19]
    Reg.io.rs1 <= CU.io.rs1 @[Decode.scala 42:15]
    Reg.io.rs2 <= CU.io.rs2 @[Decode.scala 43:15]
    Reg.io.rd <= CU.io.rd @[Decode.scala 44:14]
    Reg.io.data <= io.regdata @[Decode.scala 45:16]
    Reg.io.wenb <= CU.io.writereg @[Decode.scala 46:16]
    io.read1 <= Reg.io.d1 @[Decode.scala 49:14]
    io.read2 <= Reg.io.d2 @[Decode.scala 50:14]
    io.reg_enb <= CU.io.reg_pc_enb @[Decode.scala 51:15]
    io.instout <= io.instruction @[Decode.scala 52:15]
    io.immout <= Imme.io.out @[Decode.scala 53:12]
    io.op <= CU.io.op @[Decode.scala 54:8]
    node _io_opcode_T = bits(io.instruction, 6, 0) @[Decode.scala 55:28]
    io.opcode <= _io_opcode_T @[Decode.scala 55:12]
    io.load <= CU.io.load @[Decode.scala 56:10]
    io.writereg <= CU.io.writereg @[Decode.scala 57:14]
    io.store <= CU.io.store @[Decode.scala 58:11]
    
  module Execute : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, flip alu_op : UInt<4>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, alu_out : SInt<32>}
    
    io.alu_out <= asSInt(UInt<1>("h00")) @[Execute.scala 41:14]
    node _T = eq(io.opcode, UInt<6>("h033")) @[Execute.scala 42:19]
    node _T_1 = eq(io.opcode, UInt<5>("h013")) @[Execute.scala 42:51]
    node _T_2 = or(_T, _T_1) @[Execute.scala 42:37]
    when _T_2 : @[Execute.scala 42:70]
      node _T_3 = eq(io.alu_op, UInt<4>("h00")) @[Execute.scala 43:20]
      when _T_3 : @[Execute.scala 43:33]
        node _io_alu_out_T = add(io.arg_x, io.arg_y) @[Execute.scala 44:30]
        node _io_alu_out_T_1 = tail(_io_alu_out_T, 1) @[Execute.scala 44:30]
        node _io_alu_out_T_2 = asSInt(_io_alu_out_T_1) @[Execute.scala 44:30]
        io.alu_out <= _io_alu_out_T_2 @[Execute.scala 44:18]
        skip @[Execute.scala 43:33]
      else : @[Execute.scala 46:40]
        node _T_4 = eq(io.alu_op, UInt<4>("h08")) @[Execute.scala 46:27]
        when _T_4 : @[Execute.scala 46:40]
          node _io_alu_out_T_3 = sub(io.arg_x, io.arg_y) @[Execute.scala 47:32]
          node _io_alu_out_T_4 = tail(_io_alu_out_T_3, 1) @[Execute.scala 47:32]
          node _io_alu_out_T_5 = asSInt(_io_alu_out_T_4) @[Execute.scala 47:32]
          io.alu_out <= _io_alu_out_T_5 @[Execute.scala 47:20]
          skip @[Execute.scala 46:40]
        else : @[Execute.scala 49:40]
          node _T_5 = eq(io.alu_op, UInt<4>("h07")) @[Execute.scala 49:27]
          when _T_5 : @[Execute.scala 49:40]
            node _io_alu_out_T_6 = and(io.arg_x, io.arg_y) @[Execute.scala 50:32]
            node _io_alu_out_T_7 = asSInt(_io_alu_out_T_6) @[Execute.scala 50:32]
            io.alu_out <= _io_alu_out_T_7 @[Execute.scala 50:20]
            skip @[Execute.scala 49:40]
          else : @[Execute.scala 52:39]
            node _T_6 = eq(io.alu_op, UInt<4>("h06")) @[Execute.scala 52:27]
            when _T_6 : @[Execute.scala 52:39]
              node _io_alu_out_T_8 = or(io.arg_x, io.arg_y) @[Execute.scala 53:32]
              node _io_alu_out_T_9 = asSInt(_io_alu_out_T_8) @[Execute.scala 53:32]
              io.alu_out <= _io_alu_out_T_9 @[Execute.scala 53:20]
              skip @[Execute.scala 52:39]
            else : @[Execute.scala 55:40]
              node _T_7 = eq(io.alu_op, UInt<4>("h04")) @[Execute.scala 55:27]
              when _T_7 : @[Execute.scala 55:40]
                node _io_alu_out_T_10 = xor(io.arg_x, io.arg_y) @[Execute.scala 56:32]
                node _io_alu_out_T_11 = asSInt(_io_alu_out_T_10) @[Execute.scala 56:32]
                io.alu_out <= _io_alu_out_T_11 @[Execute.scala 56:20]
                skip @[Execute.scala 55:40]
              else : @[Execute.scala 58:40]
                node _T_8 = eq(io.alu_op, UInt<4>("h02")) @[Execute.scala 58:27]
                when _T_8 : @[Execute.scala 58:40]
                  node _io_alu_out_T_12 = lt(io.arg_x, io.arg_y) @[Execute.scala 59:33]
                  node _io_alu_out_T_13 = asSInt(_io_alu_out_T_12) @[Execute.scala 59:45]
                  io.alu_out <= _io_alu_out_T_13 @[Execute.scala 59:20]
                  skip @[Execute.scala 58:40]
                else : @[Execute.scala 61:40]
                  node _T_9 = eq(io.alu_op, UInt<4>("h01")) @[Execute.scala 61:27]
                  when _T_9 : @[Execute.scala 61:40]
                    node _io_alu_out_T_14 = bits(io.arg_y, 4, 0) @[Execute.scala 62:44]
                    node _io_alu_out_T_15 = dshl(io.arg_x, _io_alu_out_T_14) @[Execute.scala 62:33]
                    io.alu_out <= _io_alu_out_T_15 @[Execute.scala 62:20]
                    skip @[Execute.scala 61:40]
                  else : @[Execute.scala 64:41]
                    node _T_10 = eq(io.alu_op, UInt<4>("h03")) @[Execute.scala 64:27]
                    when _T_10 : @[Execute.scala 64:41]
                      node _io_alu_out_T_16 = lt(io.arg_x, io.arg_y) @[Execute.scala 65:34]
                      node _io_alu_out_T_17 = asSInt(_io_alu_out_T_16) @[Execute.scala 65:54]
                      io.alu_out <= _io_alu_out_T_17 @[Execute.scala 65:20]
                      skip @[Execute.scala 64:41]
                    else : @[Execute.scala 67:40]
                      node _T_11 = eq(io.alu_op, UInt<4>("h05")) @[Execute.scala 67:27]
                      when _T_11 : @[Execute.scala 67:40]
                        node _io_alu_out_T_18 = bits(io.arg_y, 4, 0) @[Execute.scala 68:44]
                        node _io_alu_out_T_19 = dshr(io.arg_x, _io_alu_out_T_18) @[Execute.scala 68:33]
                        io.alu_out <= _io_alu_out_T_19 @[Execute.scala 68:20]
                        skip @[Execute.scala 67:40]
                      else : @[Execute.scala 70:40]
                        node _T_12 = eq(io.alu_op, UInt<4>("h0d")) @[Execute.scala 70:27]
                        when _T_12 : @[Execute.scala 70:40]
                          node _io_alu_out_T_20 = bits(io.arg_y, 4, 0) @[Execute.scala 71:44]
                          node _io_alu_out_T_21 = dshr(io.arg_x, _io_alu_out_T_20) @[Execute.scala 71:33]
                          io.alu_out <= _io_alu_out_T_21 @[Execute.scala 71:20]
                          skip @[Execute.scala 70:40]
                        else : @[Execute.scala 73:18]
                          io.alu_out <= asSInt(UInt<1>("h00")) @[Execute.scala 74:20]
                          skip @[Execute.scala 73:18]
      skip @[Execute.scala 42:70]
    else : @[Execute.scala 79:43]
      node _T_13 = eq(io.opcode, UInt<2>("h03")) @[Execute.scala 79:25]
      when _T_13 : @[Execute.scala 79:43]
        node _io_alu_out_T_22 = add(io.arg_y, io.arg_x) @[Execute.scala 80:30]
        node _io_alu_out_T_23 = tail(_io_alu_out_T_22, 1) @[Execute.scala 80:30]
        node _io_alu_out_T_24 = asSInt(_io_alu_out_T_23) @[Execute.scala 80:30]
        io.alu_out <= _io_alu_out_T_24 @[Execute.scala 80:18]
        skip @[Execute.scala 79:43]
      else : @[Execute.scala 84:43]
        node _T_14 = eq(io.opcode, UInt<7>("h063")) @[Execute.scala 84:25]
        when _T_14 : @[Execute.scala 84:43]
          node _T_15 = eq(io.alu_op, UInt<4>("h00")) @[Execute.scala 85:22]
          when _T_15 : @[Execute.scala 85:35]
            node _io_alu_out_T_25 = eq(io.arg_x, io.arg_y) @[Execute.scala 86:36]
            node _io_alu_out_T_26 = mux(_io_alu_out_T_25, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Execute.scala 86:26]
            io.alu_out <= _io_alu_out_T_26 @[Execute.scala 86:20]
            skip @[Execute.scala 85:35]
          else : @[Execute.scala 88:43]
            node _T_16 = eq(io.alu_op, UInt<4>("h01")) @[Execute.scala 88:30]
            when _T_16 : @[Execute.scala 88:43]
              node _io_alu_out_T_27 = neq(io.arg_x, io.arg_y) @[Execute.scala 89:36]
              node _io_alu_out_T_28 = mux(_io_alu_out_T_27, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Execute.scala 89:26]
              io.alu_out <= _io_alu_out_T_28 @[Execute.scala 89:20]
              skip @[Execute.scala 88:43]
            else : @[Execute.scala 91:40]
              node _T_17 = eq(io.alu_op, UInt<4>("h04")) @[Execute.scala 91:27]
              when _T_17 : @[Execute.scala 91:40]
                node _io_alu_out_T_29 = lt(io.arg_x, io.arg_y) @[Execute.scala 92:36]
                node _io_alu_out_T_30 = mux(_io_alu_out_T_29, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Execute.scala 92:26]
                io.alu_out <= _io_alu_out_T_30 @[Execute.scala 92:20]
                skip @[Execute.scala 91:40]
              else : @[Execute.scala 93:41]
                node _T_18 = eq(io.alu_op, UInt<4>("h05")) @[Execute.scala 93:28]
                when _T_18 : @[Execute.scala 93:41]
                  node _io_alu_out_T_31 = geq(io.arg_x, io.arg_y) @[Execute.scala 94:36]
                  node _io_alu_out_T_32 = mux(_io_alu_out_T_31, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Execute.scala 94:26]
                  io.alu_out <= _io_alu_out_T_32 @[Execute.scala 94:20]
                  skip @[Execute.scala 93:41]
                else : @[Execute.scala 95:42]
                  node _T_19 = eq(io.alu_op, UInt<4>("h06")) @[Execute.scala 95:28]
                  when _T_19 : @[Execute.scala 95:42]
                    node _io_alu_out_T_33 = asUInt(io.arg_x) @[Execute.scala 96:36]
                    node _io_alu_out_T_34 = asUInt(io.arg_y) @[Execute.scala 96:54]
                    node _io_alu_out_T_35 = lt(_io_alu_out_T_33, _io_alu_out_T_34) @[Execute.scala 96:43]
                    node _io_alu_out_T_36 = mux(_io_alu_out_T_35, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Execute.scala 96:26]
                    io.alu_out <= _io_alu_out_T_36 @[Execute.scala 96:20]
                    skip @[Execute.scala 95:42]
                  else : @[Execute.scala 97:42]
                    node _T_20 = eq(io.alu_op, UInt<4>("h07")) @[Execute.scala 97:28]
                    when _T_20 : @[Execute.scala 97:42]
                      node _io_alu_out_T_37 = asUInt(io.arg_x) @[Execute.scala 98:36]
                      node _io_alu_out_T_38 = asUInt(io.arg_y) @[Execute.scala 98:55]
                      node _io_alu_out_T_39 = geq(_io_alu_out_T_37, _io_alu_out_T_38) @[Execute.scala 98:43]
                      node _io_alu_out_T_40 = mux(_io_alu_out_T_39, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Execute.scala 98:26]
                      io.alu_out <= _io_alu_out_T_40 @[Execute.scala 98:20]
                      skip @[Execute.scala 97:42]
                    else : @[Execute.scala 100:17]
                      io.alu_out <= asSInt(UInt<1>("h00")) @[Execute.scala 101:18]
                      skip @[Execute.scala 100:17]
          skip @[Execute.scala 84:43]
        else : @[Execute.scala 106:39]
          node _T_21 = eq(io.opcode, UInt<7>("h067")) @[Execute.scala 106:21]
          when _T_21 : @[Execute.scala 106:39]
            node _io_alu_out_T_41 = add(io.arg_x, io.arg_y) @[Execute.scala 107:30]
            node _io_alu_out_T_42 = tail(_io_alu_out_T_41, 1) @[Execute.scala 107:30]
            node _io_alu_out_T_43 = asSInt(_io_alu_out_T_42) @[Execute.scala 107:30]
            io.alu_out <= _io_alu_out_T_43 @[Execute.scala 107:18]
            skip @[Execute.scala 106:39]
          else : @[Execute.scala 109:43]
            node _T_22 = eq(io.opcode, UInt<6>("h037")) @[Execute.scala 109:25]
            when _T_22 : @[Execute.scala 109:43]
              io.alu_out <= io.arg_y @[Execute.scala 110:18]
              skip @[Execute.scala 109:43]
            else : @[Execute.scala 112:43]
              node _T_23 = eq(io.opcode, UInt<5>("h017")) @[Execute.scala 112:25]
              when _T_23 : @[Execute.scala 112:43]
                io.alu_out <= io.arg_y @[Execute.scala 113:18]
                skip @[Execute.scala 112:43]
    
  module Mem : 
    input clock : Clock
    input reset : Reset
    output io : {flip rdata : SInt<32>, flip address : UInt<8>, wdata : UInt<8>[4], enb : UInt<1>, fun3 : UInt<4>, load : UInt<1>, store : UInt<1>, mask : UInt<1>[4]}
    
    io.wdata[0] <= UInt<1>("h00") @[Mem.scala 23:12]
    io.wdata[1] <= UInt<1>("h00") @[Mem.scala 24:12]
    io.wdata[2] <= UInt<1>("h00") @[Mem.scala 25:12]
    io.wdata[3] <= UInt<1>("h00") @[Mem.scala 26:12]
    io.enb <= UInt<1>("h00") @[Mem.scala 27:7]
    io.fun3 <= UInt<1>("h00") @[Mem.scala 28:8]
    io.load <= UInt<1>("h00") @[Mem.scala 29:8]
    io.store <= UInt<1>("h00") @[Mem.scala 30:9]
    io.mask[0] <= UInt<1>("h00") @[Mem.scala 31:11]
    io.mask[1] <= UInt<1>("h00") @[Mem.scala 32:11]
    io.mask[2] <= UInt<1>("h00") @[Mem.scala 33:11]
    io.mask[3] <= UInt<1>("h00") @[Mem.scala 34:11]
    
  module WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip lout : SInt<32>, flip ins : UInt<32>, flip alu_out : SInt<32>, flip pcout : UInt<32>, data : SInt<32>}
    
    node _io_data_T = bits(io.ins, 6, 0) @[WB.scala 14:8]
    node _io_data_T_1 = eq(_io_data_T, UInt<2>("h03")) @[WB.scala 14:14]
    node _io_data_T_2 = bits(io.ins, 6, 0) @[WB.scala 15:8]
    node _io_data_T_3 = eq(_io_data_T_2, UInt<6>("h033")) @[WB.scala 15:13]
    node _io_data_T_4 = bits(io.ins, 6, 0) @[WB.scala 16:8]
    node _io_data_T_5 = eq(_io_data_T_4, UInt<5>("h013")) @[WB.scala 16:13]
    node _io_data_T_6 = bits(io.ins, 6, 0) @[WB.scala 17:8]
    node _io_data_T_7 = eq(_io_data_T_6, UInt<6>("h037")) @[WB.scala 17:13]
    node _io_data_T_8 = bits(io.ins, 6, 0) @[WB.scala 18:8]
    node _io_data_T_9 = eq(_io_data_T_8, UInt<5>("h017")) @[WB.scala 18:13]
    node _io_data_T_10 = bits(io.ins, 6, 0) @[WB.scala 19:8]
    node _io_data_T_11 = eq(_io_data_T_10, UInt<7>("h06f")) @[WB.scala 19:13]
    node _io_data_T_12 = asSInt(io.pcout) @[WB.scala 19:45]
    node _io_data_T_13 = add(_io_data_T_12, asSInt(UInt<4>("h04"))) @[WB.scala 19:51]
    node _io_data_T_14 = tail(_io_data_T_13, 1) @[WB.scala 19:51]
    node _io_data_T_15 = asSInt(_io_data_T_14) @[WB.scala 19:51]
    node _io_data_T_16 = bits(io.ins, 6, 0) @[WB.scala 20:8]
    node _io_data_T_17 = eq(_io_data_T_16, UInt<7>("h067")) @[WB.scala 20:13]
    node _io_data_T_18 = asSInt(io.pcout) @[WB.scala 20:45]
    node _io_data_T_19 = add(_io_data_T_18, asSInt(UInt<4>("h04"))) @[WB.scala 20:51]
    node _io_data_T_20 = tail(_io_data_T_19, 1) @[WB.scala 20:51]
    node _io_data_T_21 = asSInt(_io_data_T_20) @[WB.scala 20:51]
    node _io_data_T_22 = bits(io.ins, 6, 0) @[WB.scala 21:8]
    node _io_data_T_23 = eq(_io_data_T_22, UInt<7>("h063")) @[WB.scala 21:13]
    node _io_data_T_24 = mux(_io_data_T_23, io.alu_out, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _io_data_T_25 = mux(_io_data_T_17, _io_data_T_21, _io_data_T_24) @[Mux.scala 98:16]
    node _io_data_T_26 = mux(_io_data_T_11, _io_data_T_15, _io_data_T_25) @[Mux.scala 98:16]
    node _io_data_T_27 = mux(_io_data_T_9, io.alu_out, _io_data_T_26) @[Mux.scala 98:16]
    node _io_data_T_28 = mux(_io_data_T_7, io.alu_out, _io_data_T_27) @[Mux.scala 98:16]
    node _io_data_T_29 = mux(_io_data_T_5, io.alu_out, _io_data_T_28) @[Mux.scala 98:16]
    node _io_data_T_30 = mux(_io_data_T_3, io.alu_out, _io_data_T_29) @[Mux.scala 98:16]
    node _io_data_T_31 = mux(_io_data_T_1, io.lout, _io_data_T_30) @[Mux.scala 98:16]
    io.data <= _io_data_T_31 @[WB.scala 13:10]
    
  module CPU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdata : UInt<32>}
    
    inst fetch of Fetch @[CPU.scala 13:21]
    fetch.clock <= clock
    fetch.reset <= reset
    inst decode of Decode @[CPU.scala 16:22]
    decode.clock <= clock
    decode.reset <= reset
    inst execute of Execute @[CPU.scala 19:23]
    execute.clock <= clock
    execute.reset <= reset
    inst mem of Mem @[CPU.scala 22:19]
    mem.clock <= clock
    mem.reset <= reset
    inst wback of WB @[CPU.scala 25:21]
    wback.clock <= clock
    wback.reset <= reset
    fetch.io.enb <= decode.io.reg_enb @[CPU.scala 29:15]
    node _fetch_io_in_T = bits(decode.io.instout, 6, 0) @[CPU.scala 30:38]
    node _fetch_io_in_T_1 = eq(_fetch_io_in_T, UInt<7>("h06f")) @[CPU.scala 30:43]
    node _fetch_io_in_T_2 = asUInt(decode.io.immout) @[CPU.scala 30:78]
    node _fetch_io_in_T_3 = bits(decode.io.instout, 6, 0) @[CPU.scala 31:26]
    node _fetch_io_in_T_4 = eq(_fetch_io_in_T_3, UInt<7>("h063")) @[CPU.scala 31:31]
    node _fetch_io_in_T_5 = eq(execute.io.alu_out, asSInt(UInt<2>("h01"))) @[CPU.scala 32:27]
    node _fetch_io_in_T_6 = dshl(decode.io.immout, UInt<1>("h01")) @[CPU.scala 32:51]
    node _fetch_io_in_T_7 = asUInt(_fetch_io_in_T_6) @[CPU.scala 32:58]
    node _fetch_io_in_T_8 = mux(_fetch_io_in_T_5, _fetch_io_in_T_7, UInt<3>("h04")) @[CPU.scala 32:8]
    node _fetch_io_in_T_9 = bits(decode.io.instout, 6, 0) @[CPU.scala 33:26]
    node _fetch_io_in_T_10 = eq(_fetch_io_in_T_9, UInt<7>("h067")) @[CPU.scala 33:31]
    node _fetch_io_in_T_11 = asUInt(execute.io.alu_out) @[CPU.scala 33:69]
    node _fetch_io_in_T_12 = mux(_fetch_io_in_T_10, _fetch_io_in_T_11, UInt<3>("h04")) @[CPU.scala 33:8]
    node _fetch_io_in_T_13 = mux(_fetch_io_in_T_4, _fetch_io_in_T_8, _fetch_io_in_T_12) @[CPU.scala 31:8]
    node _fetch_io_in_T_14 = mux(_fetch_io_in_T_1, _fetch_io_in_T_2, _fetch_io_in_T_13) @[CPU.scala 30:20]
    fetch.io.in <= _fetch_io_in_T_14 @[CPU.scala 30:14]
    decode.io.regdata <= wback.io.data @[CPU.scala 37:22]
    decode.io.instruction <= io.rdata @[CPU.scala 41:26]
    decode.io.pcout <= fetch.io.out @[CPU.scala 42:20]
    node _execute_io_opcode_T = bits(decode.io.instout, 6, 0) @[CPU.scala 45:41]
    execute.io.opcode <= _execute_io_opcode_T @[CPU.scala 45:22]
    execute.io.alu_op <= decode.io.op @[CPU.scala 46:22]
    execute.io.arg_x <= decode.io.read1 @[CPU.scala 47:21]
    node _execute_io_arg_y_T = bits(decode.io.instout, 6, 0) @[CPU.scala 48:45]
    node _execute_io_arg_y_T_1 = eq(_execute_io_arg_y_T, UInt<6>("h033")) @[CPU.scala 48:50]
    node _execute_io_arg_y_T_2 = bits(decode.io.instout, 6, 0) @[CPU.scala 49:23]
    node _execute_io_arg_y_T_3 = eq(_execute_io_arg_y_T_2, UInt<6>("h023")) @[CPU.scala 49:28]
    node _execute_io_arg_y_T_4 = or(_execute_io_arg_y_T_1, _execute_io_arg_y_T_3) @[CPU.scala 48:66]
    node _execute_io_arg_y_T_5 = bits(decode.io.instout, 6, 0) @[CPU.scala 50:23]
    node _execute_io_arg_y_T_6 = eq(_execute_io_arg_y_T_5, UInt<7>("h063")) @[CPU.scala 50:28]
    node _execute_io_arg_y_T_7 = or(_execute_io_arg_y_T_4, _execute_io_arg_y_T_6) @[CPU.scala 49:46]
    node _execute_io_arg_y_T_8 = bits(decode.io.instout, 6, 0) @[CPU.scala 51:27]
    node _execute_io_arg_y_T_9 = eq(_execute_io_arg_y_T_8, UInt<5>("h013")) @[CPU.scala 51:32]
    node _execute_io_arg_y_T_10 = bits(decode.io.instout, 6, 0) @[CPU.scala 51:69]
    node _execute_io_arg_y_T_11 = eq(_execute_io_arg_y_T_10, UInt<2>("h03")) @[CPU.scala 51:74]
    node _execute_io_arg_y_T_12 = or(_execute_io_arg_y_T_9, _execute_io_arg_y_T_11) @[CPU.scala 51:49]
    node _execute_io_arg_y_T_13 = bits(decode.io.instout, 6, 0) @[CPU.scala 51:111]
    node _execute_io_arg_y_T_14 = eq(_execute_io_arg_y_T_13, UInt<7>("h067")) @[CPU.scala 51:116]
    node _execute_io_arg_y_T_15 = or(_execute_io_arg_y_T_12, _execute_io_arg_y_T_14) @[CPU.scala 51:91]
    node _execute_io_arg_y_T_16 = bits(decode.io.instout, 6, 0) @[CPU.scala 52:25]
    node _execute_io_arg_y_T_17 = eq(_execute_io_arg_y_T_16, UInt<6>("h037")) @[CPU.scala 52:30]
    node _execute_io_arg_y_T_18 = or(_execute_io_arg_y_T_15, _execute_io_arg_y_T_17) @[CPU.scala 52:5]
    node _execute_io_arg_y_T_19 = bits(decode.io.instout, 6, 0) @[CPU.scala 52:65]
    node _execute_io_arg_y_T_20 = eq(_execute_io_arg_y_T_19, UInt<5>("h017")) @[CPU.scala 52:70]
    node _execute_io_arg_y_T_21 = or(_execute_io_arg_y_T_18, _execute_io_arg_y_T_20) @[CPU.scala 52:46]
    node _execute_io_arg_y_T_22 = mux(_execute_io_arg_y_T_21, decode.io.immout, asSInt(UInt<1>("h00"))) @[CPU.scala 51:8]
    node _execute_io_arg_y_T_23 = mux(_execute_io_arg_y_T_7, decode.io.read2, _execute_io_arg_y_T_22) @[CPU.scala 48:26]
    execute.io.arg_y <= _execute_io_arg_y_T_23 @[CPU.scala 48:21]
    node _mem_io_address_T = bits(decode.io.instout, 6, 0) @[CPU.scala 64:42]
    node _mem_io_address_T_1 = eq(_mem_io_address_T, UInt<2>("h03")) @[CPU.scala 64:47]
    node _mem_io_address_T_2 = asUInt(execute.io.alu_out) @[CPU.scala 64:84]
    node _mem_io_address_T_3 = bits(decode.io.instout, 6, 0) @[CPU.scala 65:26]
    node _mem_io_address_T_4 = eq(_mem_io_address_T_3, UInt<6>("h023")) @[CPU.scala 65:31]
    node mem_io_address_hi = bits(decode.io.instout, 31, 25) @[CPU.scala 65:69]
    node mem_io_address_lo = bits(decode.io.instout, 11, 7) @[CPU.scala 65:94]
    node _mem_io_address_T_5 = cat(mem_io_address_hi, mem_io_address_lo) @[Cat.scala 30:58]
    node _mem_io_address_T_6 = asUInt(decode.io.read1) @[CPU.scala 65:120]
    node _mem_io_address_T_7 = add(_mem_io_address_T_5, _mem_io_address_T_6) @[CPU.scala 65:101]
    node _mem_io_address_T_8 = tail(_mem_io_address_T_7, 1) @[CPU.scala 65:101]
    node _mem_io_address_T_9 = mux(_mem_io_address_T_4, _mem_io_address_T_8, UInt<1>("h00")) @[CPU.scala 65:8]
    node _mem_io_address_T_10 = mux(_mem_io_address_T_1, _mem_io_address_T_2, _mem_io_address_T_9) @[CPU.scala 64:24]
    mem.io.address <= _mem_io_address_T_10 @[CPU.scala 64:19]
    mem.io.rdata <= asSInt(UInt<1>("h00")) @[CPU.scala 66:17]
    wback.io.lout <= asSInt(UInt<1>("h00")) @[CPU.scala 72:18]
    wback.io.ins <= decode.io.instruction @[CPU.scala 73:17]
    wback.io.alu_out <= execute.io.alu_out @[CPU.scala 74:21]
    wback.io.pcout <= fetch.io.out @[CPU.scala 75:19]
    
